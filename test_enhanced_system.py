"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ Quiz Bot 2.0
"""

import asyncio
import json
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
try:
    from src.utils.question_types import QuestionType, determine_question_type, get_question_type_prompt
    from src.utils.analytics import QuestionAnalytics
    from src.utils.feedback_system import FeedbackSystem
    from src.utils.integration_helper import integration_helper
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    exit(1)

def test_question_types():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
    test_themes = [
        ("–∏—Å—Ç–æ—Ä–∏—è", QuestionType.HISTORICAL),
        ("–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", QuestionType.GEOGRAPHICAL),
        ("–Ω–∞—É–∫–∞", QuestionType.SCIENTIFIC),
        ("—Å–ø–æ—Ä—Ç", QuestionType.SPORTS),
        ("–∫—É–ª—å—Ç—É—Ä–∞", QuestionType.CULTURAL),
        ("–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", QuestionType.MATHEMATICAL),
        ("–ª–æ–≥–∏–∫–∞", QuestionType.LOGICAL),
        ("–∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏", QuestionType.ASSOCIATIVE),
        ("—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è", QuestionType.CHRONOLOGICAL),
        ("–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è", QuestionType.FACTUAL)
    ]
    
    for theme, expected_type in test_themes:
        detected_type = determine_question_type(theme)
        status = "‚úÖ" if detected_type == expected_type else "‚ùå"
        print(f"{status} –¢–µ–º–∞ '{theme}' -> {detected_type.value} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_type.value})")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt = get_question_type_prompt(QuestionType.HISTORICAL, "–∏—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏")
    print(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {prompt[:100]}...")
    
    print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_analytics():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    analytics = QuestionAnalytics("test_analytics.json")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_questions = [
        {
            "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?",
            "answer": "1380",
            "quality_score": 9,
            "difficulty_level": 7,
            "question_type": "historical"
        },
        {
            "question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
            "answer": "–ú–æ—Å–∫–≤–∞",
            "quality_score": 8,
            "difficulty_level": 3,
            "question_type": "factual"
        }
    ]
    
    test_settings = {
        "theme": "–∏—Å—Ç–æ—Ä–∏—è",
        "difficulty": "medium",
        "questions_count": 2
    }
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    analytics.track_question_generation(test_questions, test_settings)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    report = analytics.get_quality_report()
    print(f"üìä –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ: {report}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = analytics.get_recommendations()
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")
    
    print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_feedback_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
    
    feedback = FeedbackSystem("test_feedback.json")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    feedback.rate_question("q1", 123, 5, "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!")
    feedback.rate_question("q1", 456, 4, "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å")
    feedback.rate_question("q2", 123, 2, "–ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∂–∞–ª–æ–±—ã
    feedback.submit_complaint("q2", 123, "ambiguous", "–í–æ–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω")
    feedback.submit_complaint("q3", 456, "incorrect", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = feedback.get_feedback_summary()
    print(f"üìä –°–≤–æ–¥–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {summary}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    suggestions = feedback.suggest_improvements()
    print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π: {suggestions}")
    
    print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

async def test_enhanced_generator():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    test_settings = {
        "theme": "–∏—Å—Ç–æ—Ä–∏—è",
        "difficulty": "medium",
        "questions_count": 3
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
    try:
        # –í–º–µ—Å—Ç–æ generator = EnhancedQuestionGenerator() –∏—Å–ø–æ–ª—å–∑—É–µ–º integration_helper
        quality_questions, rejected_questions = await integration_helper.enhanced_generator.generate_questions_with_quality_check(
            test_settings, max_attempts=1
        )
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(quality_questions)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {len(rejected_questions)} –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        if quality_questions:
            print("üìù –ü—Ä–∏–º–µ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
            question = quality_questions[0]
            print(f"–í–æ–ø—Ä–æ—Å: {question.get('question', '')}")
            print(f"–û—Ç–≤–µ—Ç: {question.get('answer', '')}")
            print(f"–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {question.get('explanation', '')}")
            print(f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: {question.get('interesting_fact', '')}")
            print(f"–ö–∞—á–µ—Å—Ç–≤–æ: {question.get('quality_score', 0)}/10")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç API –∫–ª—é—á–∞): {e}")
    
    print("‚úÖ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_integration_helper():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    test_question = {
        "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?",
        "answer": "1380",
        "explanation": "–ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ 8 —Å–µ–Ω—Ç—è–±—Ä—è 1380 –≥–æ–¥–∞ –º–µ–∂–¥—É –≤–æ–π—Å–∫–∞–º–∏ –î–º–∏—Ç—Ä–∏—è –î–æ–Ω—Å–∫–æ–≥–æ –∏ –ú–∞–º–∞—è",
        "interesting_fact": "–≠—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è –∫—Ä—É–ø–Ω–∞—è –ø–æ–±–µ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö –≤–æ–π—Å–∫ –Ω–∞–¥ –º–æ–Ω–≥–æ–ª–æ-—Ç–∞—Ç–∞—Ä–∞–º–∏",
        "source_type": "—É—á–µ–±–Ω–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏",
        "difficulty_level": 7,
        "tags": ["–∏—Å—Ç–æ—Ä–∏—è", "–†–æ—Å—Å–∏—è", "—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ"],
        "quality_score": 9
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    formatted = integration_helper.format_enhanced_question_display(test_question)
    print("üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:")
    print(formatted)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    explanation = integration_helper.format_question_explanation(test_question)
    print("üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É:")
    print(explanation)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = integration_helper.get_question_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ Quiz Bot 2.0\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_question_types()
    test_analytics()
    test_feedback_system()
    await test_enhanced_generator()
    test_integration_helper()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ (10 —Ç–∏–ø–æ–≤)")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
    print("‚úÖ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏")
    print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
    
    print("\nüéØ Quiz Bot 2.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    asyncio.run(main())