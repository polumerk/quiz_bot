# --- –ò–º–ø–æ—Ä—Ç—ã ---
import json
import asyncio
import logging
import re
import time
import random
from typing import Any, Dict, List, Set, Tuple, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
import aiohttp
from collections import defaultdict
import sqlite3
import os
from datetime import datetime
import db
import questions
import lang
from lang import LANGUAGES
import aiosqlite

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = '8082065832:AAFMg57PUuHJzTt2YavoqCK5pEBYlhpVdYg'
logging.basicConfig(level=logging.INFO)

# --- State ---
game_state: Dict[Any, Any] = {}

def get_participants(chat_id: int) -> Set[Tuple[int, str]]:
    return game_state.setdefault(chat_id, {}).setdefault('participants', set())

def get_captain(chat_id: int) -> Optional[int]:
    return game_state.setdefault(chat_id, {}).get('captain')

def set_captain(chat_id: int, user_id: int) -> None:
    game_state.setdefault(chat_id, {})['captain'] = user_id

def get_round(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).setdefault('round', 1)

def set_round(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['round'] = value

def get_question_index(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).setdefault('question_index', 0)

def set_question_index(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['question_index'] = value

def get_questions(chat_id: int) -> List[Any]:
    return game_state.setdefault(chat_id, {}).setdefault('questions', [])

def set_questions(chat_id: int, questions: List[Any]) -> None:
    game_state.setdefault(chat_id, {})['questions'] = questions

def get_answers(chat_id: int) -> List[str]:
    return game_state.setdefault(chat_id, {}).setdefault('answers', [])

def add_answer(chat_id: int, answer: str) -> None:
    game_state.setdefault(chat_id, {}).setdefault('answers', []).append(answer)

def reset_game(chat_id: int) -> None:
    game_state[chat_id] = {}

def get_total_score(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).setdefault('total_score', 0)

def add_to_total_score(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['total_score'] = get_total_score(chat_id) + value

def get_total_fast_bonus(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).setdefault('total_fast_bonus', 0)

def add_to_total_fast_bonus(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['total_fast_bonus'] = get_total_fast_bonus(chat_id) + value

def get_session_admin(chat_id: int) -> Optional[Tuple[int, str]]:
    return game_state.setdefault(chat_id, {}).get('session_admin')

def set_session_admin(chat_id: int, user_id: int, name: str) -> None:
    game_state.setdefault(chat_id, {})['session_admin'] = (user_id, name)

def get_difficulty(chat_id: int) -> str:
    return game_state.setdefault(chat_id, {}).get('difficulty', 'medium')

def set_difficulty(chat_id: int, value: str) -> None:
    game_state.setdefault(chat_id, {})['difficulty'] = value

def get_rounds(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).get('rounds', 3)

def set_rounds(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['rounds'] = value

def get_questions_per_round(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).get('questions_per_round', 5)

def set_questions_per_round(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['questions_per_round'] = value

def get_time_per_question(chat_id: int) -> int:
    return game_state.setdefault(chat_id, {}).get('time_per_question', 300)

def set_time_per_question(chat_id: int, value: int) -> None:
    game_state.setdefault(chat_id, {})['time_per_question'] = value

def get_fast_bonus_time(chat_id: int) -> int:
    time_per_question = get_time_per_question(chat_id)
    return max(1, int(time_per_question * 0.2))

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ---
class ThemeStageFilter(filters.MessageFilter):
    def filter(self, message) -> bool:
        chat_id = message.chat.id
        return game_state.get(chat_id, {}).get('awaiting_theme', False)

class AnswerStageFilter(filters.MessageFilter):
    def filter(self, message) -> bool:
        chat_id = message.chat.id
        return game_state.get(chat_id, {}).get('awaiting_answer', False)

THEME_STAGE_FILTER = ThemeStageFilter()
ANSWER_STAGE_FILTER = AnswerStageFilter()

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
def format_round_results_individual(participants: Dict[int, str], score_by_user: Dict[int, int], fast_bonus_by_user: Dict[int, int], explanations_by_user: Dict[int, List[Dict[str, Any]]], chat_id=None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    sorted_participants = sorted(participants.items(), key=lambda x: (score_by_user[x[0]] + fast_bonus_by_user[x[0]]), reverse=True)
    text = f'üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n'
    for pos, (uid, name) in enumerate(sorted_participants):
        total = score_by_user[uid]
        bonus = fast_bonus_by_user[uid]
        medal = lang.get_emoji('emoji_leader', chat_id) if pos < 3 else '‚≠ê'
        text += f'{medal} {name}: {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total+bonus})\n'
        for idx, r in enumerate(explanations_by_user[uid], 1):
            status = '‚úÖ' if r.get('correct') else '‚ùå'
            explanation = r.get('explanation', '')
            correct_answer = r.get('correct_answer') or r.get('reference_answer') or ''
            text += f'    {status} –í–æ–ø—Ä–æ—Å {idx}: {r.get("question")}\n    –û—Ç–≤–µ—Ç: {r.get("answer")}\n'
            if correct_answer:
                text += f'    –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n'
            text += f'    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {explanation}\n'
        text += '\n'
    return text

def format_round_results_team(results: List[Dict[str, Any]], correct: int, total: int, fast_bonus: int, fast_time: Optional[float], total_score: int, total_fast_bonus: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    text = f'üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n'
    if fast_bonus:
        if fast_time is not None:
            text += f'‚ö° –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (+1)! –û—Ç–≤–µ—Ç –±—ã–ª –¥–∞–Ω –∑–∞ {int(fast_time)} —Å–µ–∫—É–Ω–¥.\n'
        else:
            text += f'‚ö° –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (+1)!\n'
    text += '\n'
    for i, r in enumerate(results, 1):
        status = '‚úÖ' if r.get('correct') else '‚ùå'
        explanation = r.get('explanation', '')
        correct_answer = r.get('correct_answer') or r.get('reference_answer') or ''
        text += f'{status} –í–æ–ø—Ä–æ—Å {i}: {r.get("question")}\n–û—Ç–≤–µ—Ç: {r.get("answer")}\n'
        if correct_answer:
            text += f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n'
        text += f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {explanation}\n\n'
    total_points = total_score + total_fast_bonus
    text += f'‚≠ê –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—á—ë—Ç: {total_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, {total_fast_bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total_points} –±–∞–ª–ª–æ–≤) –∑–∞ –≤—Å–µ —Ä–∞—É–Ω–¥—ã.'
    return text

# --- –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–µ–¥–∏–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤) ---
async def send_settings_message(context, chat_id, stage, extra=None):
    """
    stage: 'mode', 'difficulty', 'rounds', 'questions', 'time', 'theme'
    extra: dict —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    if extra is None:
        extra = {}
    mode = extra.get('mode')
    difficulty = extra.get('difficulty')
    rounds = extra.get('rounds')
    questions = extra.get('questions')
    time_per_question = extra.get('time_per_question')
    text = ''
    keyboard = []
    if stage == 'mode':
        emoji = lang.get_emoji('emoji_welcome', chat_id)
        text = f'{emoji} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:'
        keyboard = [
            [InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–Ω—ã–π', callback_data='mode_team')],
            [InlineKeyboardButton('–ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è', callback_data='mode_individual')]
        ]
    elif stage == 'difficulty':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:'
        keyboard = [
            [InlineKeyboardButton('–õ–µ–≥–∫–∏–π', callback_data='difficulty_easy')],
            [InlineKeyboardButton('–°—Ä–µ–¥–Ω–∏–π', callback_data='difficulty_medium')],
            [InlineKeyboardButton('–°–ª–æ–∂–Ω—ã–π', callback_data='difficulty_hard')]
        ]
    elif stage == 'rounds':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤:'
        keyboard = [[InlineKeyboardButton(str(r), callback_data=f'rounds_{r}')] for r in range(1, 6)]
    elif stage == 'questions':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ:'
        keyboard = [[InlineKeyboardButton(str(q), callback_data=f'questions_{q}')] for q in range(3, 11)]
    elif stage == 'time':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:'
        keyboard = [
            [InlineKeyboardButton('1 –º–∏–Ω', callback_data='time_60')],
            [InlineKeyboardButton('2 –º–∏–Ω', callback_data='time_120')],
            [InlineKeyboardButton('3 –º–∏–Ω', callback_data='time_180')],
            [InlineKeyboardButton('5 –º–∏–Ω', callback_data='time_300')]
        ]
    # –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–µ–∫—Å—Ç
    settings = []
    if mode:
        settings.append(f'<b>–†–µ–∂–∏–º:</b> {"–ö–æ–º–∞–Ω–¥–Ω—ã–π" if mode=="team" else "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π"}')
    if difficulty:
        diff_str = {'easy': '–õ–µ–≥–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'hard': '–°–ª–æ–∂–Ω—ã–π'}.get(difficulty, difficulty)
        settings.append(f'<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {diff_str}')
    if rounds:
        settings.append(f'<b>–†–∞—É–Ω–¥–æ–≤:</b> {rounds}')
    if questions:
        settings.append(f'<b>–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ:</b> {questions}')
    if time_per_question:
        settings.append(f'<b>–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:</b> {time_per_question//60} –º–∏–Ω.')
    if settings:
        text += '\n\n<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n' + '\n'.join(settings)
    msg_id = game_state[chat_id].get('settings_message_id')
    try:
        if msg_id:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            msg = await context.bot.send_message(
                chat_id,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            game_state[chat_id]['settings_message_id'] = msg.message_id
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
        msg = await context.bot.send_message(
            chat_id,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        game_state[chat_id]['settings_message_id'] = msg.message_id

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id if update.effective_user else None
    user_name = update.effective_user.full_name if update.effective_user else None
    if user_id is None or user_name is None:
        await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    if game_state.get(chat_id, {}).get('session_admin'):
        admin_id, admin_name = game_state[chat_id]['session_admin']
        await update.message.reply_text(f'–°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ê–¥–º–∏–Ω: {admin_name}. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.')
        return
    reset_game(chat_id)
    set_session_admin(chat_id, user_id, user_name)
    # --- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã ---
    await send_settings_message(context, chat_id, 'mode')
    game_state[chat_id]['awaiting_mode'] = True

async def mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º!', show_alert=True)
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('mode_'):
        return
    mode = 'team' if data == 'mode_team' else 'individual'
    game_state[chat_id]['mode'] = mode
    game_state[chat_id]['awaiting_mode'] = False
    await query.answer(f'–†–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω: {"–ö–æ–º–∞–Ω–¥–Ω—ã–π" if mode=="team" else "–ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"}')
    await send_settings_message(context, chat_id, 'difficulty', extra={'mode': mode})
    game_state[chat_id]['awaiting_difficulty'] = True

async def difficulty_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å!', show_alert=True)
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('difficulty_'):
        return
    difficulty = data.split('_')[1]
    set_difficulty(chat_id, difficulty)
    game_state[chat_id]['awaiting_difficulty'] = False
    mode = game_state[chat_id].get('mode')
    await query.answer(f'–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {"–õ–µ–≥–∫–∏–π" if difficulty=="easy" else ("–°—Ä–µ–¥–Ω–∏–π" if difficulty=="medium" else "–°–ª–æ–∂–Ω—ã–π")}')
    await send_settings_message(context, chat_id, 'rounds', extra={'mode': mode, 'difficulty': difficulty})
    game_state[chat_id]['awaiting_rounds'] = True

async def theme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.message.text:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id if update.effective_user else None
    admin = get_session_admin(chat_id)
    if not game_state.get(chat_id, {}).get('awaiting_theme'):
        return
    if not admin or user_id != admin[0]:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É!')
        return
    theme = update.message.text.strip()
    game_state[chat_id]['theme'] = theme
    game_state[chat_id]['awaiting_theme'] = False
    game_state[chat_id]['registration'] = True
    game_state[chat_id]['participants'] = set()
    await send_registration_message(context, chat_id)
    # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.create_task(registration_timeout(context, chat_id, 60))

async def send_registration_message(context, chat_id, countdown: Optional[int] = None):
    if 'theme' not in game_state.get(chat_id, {}):
        await context.bot.send_message(chat_id, "–¢–µ–º–∞ –∫–≤–∏–∑–∞ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É!")
        return
    participants = get_participants(chat_id)
    theme = game_state[chat_id]['theme']
    players = ''
    lang_code = lang.get_language(chat_id)
    emoji_list = LANGUAGES[lang_code]['emoji_player']
    for i, (_, name) in enumerate(participants):
        emoji = emoji_list[i % len(emoji_list)]
        players += f'{emoji} {name}\n'
    # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ---
    mode = game_state[chat_id].get('mode', 'team')
    difficulty = get_difficulty(chat_id)
    rounds = get_rounds(chat_id)
    questions_per_round = get_questions_per_round(chat_id)
    time_per_question = get_time_per_question(chat_id)
    mode_str = '–ö–æ–º–∞–Ω–¥–Ω—ã–π' if mode == 'team' else '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'
    diff_str = {'easy': '–õ–µ–≥–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'hard': '–°–ª–æ–∂–Ω—ã–π'}.get(difficulty, difficulty)
    settings_text = (
        f'<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:</b>\n'
        f'<b>–†–µ–∂–∏–º:</b> {mode_str}\n'
        f'<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {diff_str}\n'
        f'<b>–†–∞—É–Ω–¥–æ–≤:</b> {rounds}\n'
        f'<b>–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ:</b> {questions_per_round}\n'
        f'<b>–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç:</b> {time_per_question//60} –º–∏–Ω.'
    )
    text = (
        f'üìö <b>–¢–µ–º–∞ –∫–≤–∏–∑–∞:</b> {theme}\n\n'
        f'–ù–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!\n'
        f'–ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".'
        f'\n\n{settings_text}'
    )
    if players:
        text += f'\n\n<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{players}'
    # –ö–Ω–æ–ø–∫–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á—ë—Ç–æ–º
    if countdown is not None:
        btn_text = f'–ù–∞—á–∞—Ç—å –∏–≥—Ä—É ({countdown:02d} —Å–µ–∫)' if countdown > 0 else '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'
    else:
        btn_text = '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'
    keyboard = [[InlineKeyboardButton('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data='join')]]
    keyboard.append([InlineKeyboardButton(btn_text, callback_data='end_registration')])
    keyboard.append([InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', callback_data='show_rating')])
    keyboard.append([InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', callback_data='leave')])
    msg_id = game_state[chat_id].get('registration_message_id')
    if msg_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
            msg = await context.bot.send_message(
                chat_id,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            game_state[chat_id]['registration_message_id'] = msg.message_id
    else:
        msg = await context.bot.send_message(
            chat_id,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        game_state[chat_id]['registration_message_id'] = msg.message_id

async def registration_timeout(context, chat_id, timeout):
    for t in range(timeout, 0, -5):
        if not game_state.get(chat_id, {}).get('registration', False):
            return
        await send_registration_message(context, chat_id, countdown=t)
        await asyncio.sleep(5)
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
    if game_state.get(chat_id, {}).get('registration', False):
        await send_registration_message(context, chat_id, countdown=0)
        await end_registration(context, chat_id)

async def join_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    print(f"[LOG] join_callback: data={getattr(query, 'data', None)}, user={getattr(getattr(query, 'from_user', None), 'full_name', None)}")
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user = query.from_user
    participants = get_participants(chat_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if any(uid == user.id for uid, _ in participants):
        await query.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        return
    participants.add((user.id, user.full_name))
    await query.answer(f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {user.full_name}')
    await send_registration_message(context, chat_id)

async def end_registration_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!', show_alert=True)
        return
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if not game_state.get(chat_id, {}).get('registration', False):
        await query.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', show_alert=True)
        return
    await end_registration(context, chat_id)
    await query.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

async def end_registration(context, chat_id):
    game_state[chat_id]['registration'] = False
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ, –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ
    participants = list(get_participants(chat_id))
    if not participants:
        await context.bot.send_message(chat_id, '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        reset_game(chat_id)
        return
    mode = game_state[chat_id].get('mode', 'team')
    if mode == 'team':
        # –í—ã–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f'captain_{uid}')]
            for uid, name in participants
        ]
        msg = await context.bot.send_message(
            chat_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è):',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        game_state[chat_id]['captain_message_id'] = msg.message_id
    else:
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî —Å—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç—É–µ–º —Ä–∞—É–Ω–¥
        msg = await context.bot.send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ üßë‚Äçüéì')
        game_state[chat_id]['indiv_start_message_id'] = msg.message_id
        await start_round(context, chat_id)

async def captain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('captain_'):
        return
    uid = int(data.split('_')[1])
    set_captain(chat_id, uid)
    await query.answer('–í—ã–±—Ä–∞–Ω –∫–∞–ø–∏—Ç–∞–Ω!')
    await context.bot.send_message(chat_id, f'–ö–∞–ø–∏—Ç–∞–Ω: {query.from_user.full_name}')
    await start_round(context, chat_id)

async def start_round(context, chat_id):
    round_num = get_round(chat_id)
    theme = game_state[chat_id]['theme']
    msg = await context.bot.send_message(chat_id, f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞—É–Ω–¥–∞ {round_num}...')
    game_state[chat_id]['gen_questions_message_id'] = msg.message_id
    questions_list = await questions.openai_generate_questions(theme, round_num, chat_id, get_difficulty, get_questions_per_round)
    set_questions(chat_id, questions_list)
    set_question_index(chat_id, 0)
    game_state[chat_id]['answers'] = []
    # --- –°–±—Ä–æ—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ ---
    if game_state[chat_id].get('mode', 'team') == 'individual':
        game_state[chat_id]['individual_answers'] = {}
    await ask_next_question(context, chat_id)

async def ask_next_question(context, chat_id):
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    for key in ['indiv_start_message_id', 'gen_questions_message_id']:
        msg_id = game_state[chat_id].pop(key, None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id, msg_id)
            except Exception:
                pass
    questions = get_questions(chat_id)
    idx = get_question_index(chat_id)
    if idx >= len(questions):
        game_state[chat_id]['awaiting_answer'] = False
        await finish_round(context, chat_id)
        return
    q = questions[idx]
    if isinstance(q, str):
        question_text = q
        difficulty = None
    else:
        question_text = q.get('question', str(q))
        difficulty = q.get('difficulty')
    mode = game_state[chat_id].get('mode', 'team')
    time_per_question = get_time_per_question(chat_id)
    time_str = f'{time_per_question//60} –º–∏–Ω—É—Ç–∞' if time_per_question == 60 else f'{time_per_question//60} –º–∏–Ω—É—Ç—ã' if time_per_question in (120, 180) else f'{time_per_question//60} –º–∏–Ω—É—Ç'
    if mode == 'individual':
        text = (
            f'‚ùì <b>–í–æ–ø—Ä–æ—Å {idx+1}</b>\n\n'
            f'<b>{question_text}</b>\n\n'
            f'‚úçÔ∏è <i>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º!</i>\n'
            f'‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ:</b> {time_str}'
        )
        msg = await context.bot.send_message(
            chat_id,
            text,
            parse_mode='HTML'
        )
        game_state[chat_id]['current_question_message_id'] = msg.message_id
        game_state[chat_id]['answer_message_id'] = msg.message_id
        game_state[chat_id]['question_start_time'] = time.time()
        game_state[chat_id]['awaiting_answer'] = True
        asyncio.create_task(question_countdown(context, chat_id, time_per_question))
        return
    # --- –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º ---
    captain_id = get_captain(chat_id)
    keyboard = [[InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data='answer')]]
    text = (
        f'‚ùì <b>–í–æ–ø—Ä–æ—Å {idx+1}</b>\n\n'
        f'<b>{question_text}</b>\n\n'
        f'üë• <i>–û–±—Å—É–¥–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å", –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã</i>\n'
        f'‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ:</b> {time_str}'
    )
    msg = await context.bot.send_message(
        chat_id,
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    await context.bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
    game_state[chat_id]['current_question_message_id'] = msg.message_id
    game_state[chat_id]['question_start_time'] = time.time()
    asyncio.create_task(question_countdown(context, chat_id, time_per_question))

async def question_countdown(context, chat_id, timeout):
    try:
        if timeout > 60:
            await asyncio.sleep(timeout - 60)
            if not game_state.get(chat_id, {}).get('awaiting_answer', False):
                return
            await context.bot.send_message(chat_id, f'‚è≥ –û—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ!')
            await asyncio.sleep(50)
            if not game_state.get(chat_id, {}).get('awaiting_answer', False):
                return
            await context.bot.send_message(chat_id, f'‚ö° –û—Å—Ç–∞–ª–æ—Å—å 10 —Å–µ–∫—É–Ω–¥!')
            await asyncio.sleep(10)
            if not game_state.get(chat_id, {}).get('awaiting_answer', False):
                return
        else:
            await asyncio.sleep(timeout)
            if not game_state.get(chat_id, {}).get('awaiting_answer', False):
                return
        if not game_state.get(chat_id, {}).get('awaiting_answer', False):
            return
        idx = get_question_index(chat_id)
        questions = get_questions(chat_id)
        mode = game_state[chat_id].get('mode', 'team')
        if idx < len(questions):
            if mode == 'team':
                await context.bot.send_message(chat_id, '‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ! –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω.')
                game_state[chat_id]['awaiting_answer'] = False
                set_question_index(chat_id, idx+1)
                await ask_next_question(context, chat_id)
            else:
                await context.bot.send_message(chat_id, '‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ! –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å, –Ω–æ –±–µ–∑ –±–æ–Ω—É—Å–∞ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å.')
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –≤—Å–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∏–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
                participants = {uid for uid, _ in get_participants(chat_id)}
                individual_answers = game_state[chat_id].get('individual_answers', {})
                if idx not in individual_answers:
                    individual_answers[idx] = {}
                answered = set(individual_answers[idx].keys())
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö
                for uid in participants - answered:
                    individual_answers[idx][uid] = {
                        'answer': '',
                        'fast_bonus': 0,
                        'fast_time': None,
                        'name': ''
                    }
                game_state[chat_id]['awaiting_answer'] = False
                set_question_index(chat_id, idx+1)
                await ask_next_question(context, chat_id)
    except Exception as e:
        print('[LOG] –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞:', e)

async def answer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    captain_id = get_captain(chat_id)
    if user_id != captain_id:
        await query.answer('–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç!', show_alert=True)
        return
    await query.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å reply
    msg = await context.bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
    game_state[chat_id]['awaiting_answer'] = True
    game_state[chat_id]['answer_message_id'] = msg.message_id

async def answer_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('[LOG] answer_message_handler called')
    if not update.message or not update.effective_chat or not update.effective_user or not update.message.text:
        print('[LOG] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç message, effective_chat, effective_user –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞')
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    print(f'[LOG] chat_id={chat_id}, user_id={user_id}')
    mode = game_state.get(chat_id, {}).get('mode', 'team')
    if not game_state.get(chat_id, {}).get('awaiting_answer'):
        print('[LOG] –ü—Ä–æ–ø—É—Å–∫: not awaiting_answer')
        return
    # --- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ---
    if mode == 'individual':
        participants = {uid for uid, _ in get_participants(chat_id)}
        if user_id not in participants:
            print('[LOG] –ü—Ä–æ–ø—É—Å–∫: user_id –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            return
        answer_msg_id = game_state[chat_id].get('answer_message_id')
        reply_msg_id = update.message.reply_to_message.message_id if update.message.reply_to_message else None
        if not update.message.reply_to_message or reply_msg_id != answer_msg_id:
            print('[LOG] –ü—Ä–æ–ø—É—Å–∫: –æ—Ç–≤–µ—Ç –Ω–µ reply –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            return
        answer = update.message.text.strip()
        idx = get_question_index(chat_id)
        if 'individual_answers' not in game_state[chat_id]:
            game_state[chat_id]['individual_answers'] = {}
        if idx not in game_state[chat_id]['individual_answers']:
            game_state[chat_id]['individual_answers'][idx] = {}
        if user_id in game_state[chat_id]['individual_answers'][idx]:
            print('[LOG] –ü—Ä–æ–ø—É—Å–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å')
            return
        start_time = game_state[chat_id].get('question_start_time')
        answer_time = time.time()
        fast_bonus = 0
        if start_time:
            elapsed = answer_time - start_time
            if elapsed <= get_fast_bonus_time(chat_id):
                fast_bonus = 1
            else:
                fast_bonus = 0
        game_state[chat_id]['individual_answers'][idx][user_id] = {
            'answer': answer,
            'fast_bonus': fast_bonus,
            'fast_time': elapsed if start_time else None,
            'name': update.effective_user.full_name
        }
        print(f'[LOG] –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {user_id} -> {answer}')
        await update.message.reply_text('‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! ' + random.choice(lang.get_text('feedback_good', chat_id)))
        answered = set(game_state[chat_id]['individual_answers'][idx].keys())
        if answered == participants:
            game_state[chat_id]['awaiting_answer'] = False
            set_question_index(chat_id, idx+1)
            await ask_next_question(context, chat_id)
        return
    # --- –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º ---
    captain_id = get_captain(chat_id)
    print(f'[LOG] captain_id={captain_id}')
    if user_id != captain_id:
        print('[LOG] –ü—Ä–æ–ø—É—Å–∫: user_id != captain_id')
        return
    answer_msg_id = game_state[chat_id].get('answer_message_id')
    reply_msg_id = update.message.reply_to_message.message_id if update.message.reply_to_message else None
    print(f'[LOG] answer_msg_id={answer_msg_id}, reply_msg_id={reply_msg_id}')
    if not update.message.reply_to_message or reply_msg_id != answer_msg_id:
        print('[LOG] –ü—Ä–æ–ø—É—Å–∫: –æ—Ç–≤–µ—Ç –Ω–µ reply –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    answer = update.message.text.strip()
    print(f'[LOG] –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {answer}')
    add_answer(chat_id, answer)
    game_state[chat_id]['awaiting_answer'] = False
    # --- –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç ---
    start_time = game_state[chat_id].get('question_start_time')
    answer_time = time.time()
    fast_bonus = 0
    if start_time:
        elapsed = answer_time - start_time
        if elapsed <= get_fast_bonus_time(chat_id):
            fast_bonus = 1
            game_state[chat_id]['last_fast_bonus'] = 1
            game_state[chat_id]['last_fast_time'] = elapsed
        else:
            game_state[chat_id]['last_fast_bonus'] = 0
            game_state[chat_id]['last_fast_time'] = elapsed
    # Unpin –≤–æ–ø—Ä–æ—Å
    msg_id = game_state[chat_id].get('current_question_message_id')
    if msg_id:
        try:
            await context.bot.unpin_chat_message(chat_id, msg_id)
        except Exception:
            pass
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    idx = get_question_index(chat_id)
    set_question_index(chat_id, idx+1)
    await ask_next_question(context, chat_id)

async def finish_round(context, chat_id):
    theme = game_state[chat_id]['theme']
    questions_list = get_questions(chat_id)
    mode = game_state[chat_id].get('mode', 'team')
    def remove_registration_buttons():
        msg_id = game_state.get(chat_id, {}).get('registration_message_id')
        if msg_id:
            try:
                import asyncio
                coro = context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id, reply_markup=None)
                if asyncio.iscoroutine(coro):
                    asyncio.create_task(coro)
            except Exception:
                pass
    if mode == 'individual':
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = {uid: name for uid, name in get_participants(chat_id)}
        answers_by_user = {uid: [] for uid in participants}
        fast_bonus_by_user = {uid: 0 for uid in participants}
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        individual_answers = game_state[chat_id].get('individual_answers', {})
        qa_pairs = []
        user_for_qa = []  # user_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        for idx, q in enumerate(questions_list):
            ans_dict = individual_answers.get(idx, {})
            for uid in participants:
                ans = ans_dict.get(uid)
                if ans:
                    qa_pairs.append({"question": q["question"] if isinstance(q, dict) else str(q), "answer": ans["answer"]})
                    user_for_qa.append(uid)
                else:
                    qa_pairs.append({"question": q["question"] if isinstance(q, dict) else str(q), "answer": ""})
                    user_for_qa.append(uid)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–æ–º
        results = await questions.openai_check_answers(theme, [qa["question"] for qa in qa_pairs], [qa["answer"] for qa in qa_pairs])
        # –°—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        score_by_user = {uid: 0 for uid in participants}
        explanations_by_user = {uid: [] for uid in participants}
        for i, r in enumerate(results):
            uid = user_for_qa[i]
            ans_dict = individual_answers.get(i // len(participants), {})
            ans = ans_dict.get(uid)
            if r.get("correct"):
                score_by_user[uid] += 1
                # –ë–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª –±—ã—Å—Ç—Ä—ã–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
                if ans and ans.get("fast_bonus"):
                    fast_bonus_by_user[uid] += 1
            explanations_by_user[uid].append(r)
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–π—Ç–∏–Ω–≥
        text = f'üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n'
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
        sorted_participants = sorted(participants.items(), key=lambda x: (score_by_user[x[0]] + fast_bonus_by_user[x[0]]), reverse=True)
        for pos, (uid, name) in enumerate(sorted_participants):
            total = score_by_user[uid]
            bonus = fast_bonus_by_user[uid]
            medal = lang.get_emoji('emoji_leader', chat_id) if pos < 3 else '‚≠ê'
            text += f'{medal} {name}: {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total+bonus})\n'
            for idx, r in enumerate(explanations_by_user[uid], 1):
                status = '‚úÖ' if r.get('correct') else '‚ùå'
                explanation = r.get('explanation', '')
                correct_answer = r.get('correct_answer') or r.get('reference_answer') or ''
                text += f'    {status} –í–æ–ø—Ä–æ—Å {idx}: {r.get("question")}\n    –û—Ç–≤–µ—Ç: {r.get("answer")}\n'
                if correct_answer:
                    text += f'    –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n'
                text += f'    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {explanation}\n'
            text += '\n'
        await context.bot.send_message(chat_id, text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Å—á—ë—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ game_state
        if 'individual_total_score' not in game_state[chat_id]:
            game_state[chat_id]['individual_total_score'] = {uid: 0 for uid in participants}
        if 'individual_total_bonus' not in game_state[chat_id]:
            game_state[chat_id]['individual_total_bonus'] = {uid: 0 for uid in participants}
        for uid in participants:
            game_state[chat_id]['individual_total_score'][uid] += score_by_user[uid]
            game_state[chat_id]['individual_total_bonus'][uid] += fast_bonus_by_user[uid]
        # –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        round_num = get_round(chat_id)
        total_rounds = get_rounds(chat_id)
        if round_num < total_rounds:
            set_round(chat_id, round_num+1)
            await context.bot.send_message(chat_id, f'üëâ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É? –ù–∞–ø–∏—à–∏—Ç–µ "/next"')
            game_state[chat_id]['awaiting_next'] = True
        else:
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            text = 'üèÜ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n'
            sorted_final = sorted(participants.items(), key=lambda x: (game_state[chat_id]['individual_total_score'][x[0]] + game_state[chat_id]['individual_total_bonus'][x[0]]), reverse=True)
            for pos, (uid, name) in enumerate(sorted_final):
                total = game_state[chat_id]['individual_total_score'][uid]
                bonus = game_state[chat_id]['individual_total_bonus'][uid]
                medal = lang.get_emoji('emoji_leader', chat_id) if pos < 3 else '‚≠ê'
                text += f'{medal} {name}: {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total+bonus})\n'
            winner = sorted_final[0][1] if sorted_final else ''
            winner_id = sorted_final[0][0] if sorted_final else None
            text += f'\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {winner}!'
            await context.bot.send_message(chat_id, text)
            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
            for uid, name in participants.items():
                score = game_state[chat_id]['individual_total_score'][uid] + game_state[chat_id]['individual_total_bonus'][uid]
                db.update_user_stats(uid, name, score, win=(winner_id is not None and uid == winner_id))
            if winner_id is not None:
                db.add_game_stat(chat_id, theme, mode, get_rounds(chat_id), get_questions_per_round(chat_id), winner_id)
            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ---
            game_id = db.get_last_game_id(chat_id)
            if game_id is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
                answer_rows = []
                for idx, q in enumerate(questions_list):
                    ans_dict = individual_answers.get(idx, {}) if 'individual_answers' in locals() and individual_answers else {}
                    for uid in participants if participants else []:
                        ans = ans_dict.get(uid) if ans_dict else None
                        answer_rows.append({
                            'user_id': uid,
                            'question': q["question"] if isinstance(q, dict) else str(q),
                            'answer_text': ans["answer"] if ans else '',
                            'correct': explanations_by_user[uid][idx]["correct"] if uid in explanations_by_user and idx < len(explanations_by_user[uid]) else 0,
                            'fast_bonus': ans["fast_bonus"] if ans else 0,
                            'time_to_answer': ans["fast_time"] if ans and "fast_time" in ans else None
                        })
                db.insert_answers(game_id, answer_rows)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                sorted_final = sorted(participants.items(), key=lambda x: (game_state[chat_id]['individual_total_score'][x[0]] + game_state[chat_id]['individual_total_bonus'][x[0]]), reverse=True)
                participant_rows = []
                for place, (uid, name) in enumerate(sorted_final, 1):
                    participant_rows.append({
                        'user_id': uid,
                        'score': game_state[chat_id]['individual_total_score'][uid],
                        'fast_bonus': game_state[chat_id]['individual_total_bonus'][uid],
                        'place': place
                    })
                db.insert_game_participants(game_id, participant_rows)
            remove_registration_buttons()
            reset_game(chat_id)
            return
    # --- –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º ---
    answers = get_answers(chat_id)
    await context.bot.send_message(chat_id, '–†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã...')
    results = await questions.openai_check_answers(theme, questions_list, answers)
    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    if not isinstance(results, list) or not all(isinstance(r, dict) for r in results):
        await context.bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.')
        print('[LOG] –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI:', results)
        return
    correct = sum(1 for r in results if r.get('correct'))
    total = len(questions_list)
    # --- –ë–æ–Ω—É—Å—ã –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç ---
    fast_bonus = 0
    fast_time = game_state[chat_id].get('last_fast_time')
    if game_state[chat_id].get('last_fast_bonus') and results and results[0].get('correct'):
        fast_bonus = 1
    # --- –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Å—á—ë—Ç—á–∏–∫—É –±–æ–Ω—É—Å–æ–≤ ---
    add_to_total_score(chat_id, correct)
    add_to_total_fast_bonus(chat_id, fast_bonus)
    total_score = get_total_score(chat_id)
    total_fast_bonus = get_total_fast_bonus(chat_id)
    text = f'üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n'
    if fast_bonus:
        text += f'‚ö° –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç (+1)! –û—Ç–≤–µ—Ç –±—ã–ª –¥–∞–Ω –∑–∞ {int(fast_time)} —Å–µ–∫—É–Ω–¥.\n'
    text += '\n'
    for i, r in enumerate(results, 1):
        status = '‚úÖ' if r.get('correct') else '‚ùå'
        explanation = r.get('explanation', '')
        correct_answer = r.get('correct_answer') or r.get('reference_answer') or ''
        text += f'{status} –í–æ–ø—Ä–æ—Å {i}: {r.get("question")}\n–û—Ç–≤–µ—Ç: {r.get("answer")}\n'
        if correct_answer:
            text += f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n'
        text += f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {explanation}\n\n'
    total_points = total_score + total_fast_bonus
    text += f'‚≠ê –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—á—ë—Ç: {total_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, {total_fast_bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total_points} –±–∞–ª–ª–æ–≤) –∑–∞ –≤—Å–µ —Ä–∞—É–Ω–¥—ã.'
    await context.bot.send_message(chat_id, text)
    # –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    round_num = get_round(chat_id)
    total_rounds = get_rounds(chat_id)
    if round_num < total_rounds:
        set_round(chat_id, round_num+1)
        await context.bot.send_message(chat_id, f'üëâ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É? –ù–∞–ø–∏—à–∏—Ç–µ "/next"')
        game_state[chat_id]['awaiting_next'] = True
    else:
        await context.bot.send_message(chat_id, f'üèÜ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, {total_fast_bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total_points} –±–∞–ª–ª–æ–≤) –∑–∞ –≤—Å–µ —Ä–∞—É–Ω–¥—ã!')
        # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞ ---
        captain_id = get_captain(chat_id)
        participants = get_participants(chat_id)
        captain_name = None
        for uid, name in participants:
            if uid == captain_id:
                captain_name = name
                break
        if captain_id and captain_name:
            db.update_user_stats(captain_id, captain_name, total_score + total_fast_bonus, win=True)
        db.add_game_stat(chat_id, theme, mode, get_rounds(chat_id), get_questions_per_round(chat_id), captain_id)
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ---
        game_id = db.get_last_game_id(chat_id)
        if game_id is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç)
            answer_rows = []
            for idx, q in enumerate(questions_list):
                answer_rows.append({
                    'user_id': captain_id,
                    'question': q["question"] if isinstance(q, dict) else str(q),
                    'answer_text': answers[idx] if idx < len(answers) else '',
                    'correct': results[idx]["correct"] if idx < len(results) else 0,
                    'fast_bonus': fast_bonus if idx == 0 else 0,  # —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    'time_to_answer': fast_time if idx == 0 else None
                })
            db.insert_answers(game_id, answer_rows)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫–∞–ø–∏—Ç–∞–Ω ‚Äî 1 –º–µ—Å—Ç–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî 2+)
            participant_rows = []
            place = 1
            for uid, name in participants:
                participant_rows.append({
                    'user_id': uid,
                    'score': total_score if uid == captain_id else 0,
                    'fast_bonus': total_fast_bonus if uid == captain_id else 0,
                    'place': place if uid == captain_id else 2
                })
            db.insert_game_participants(game_id, participant_rows)
        remove_registration_buttons()
        reset_game(chat_id)
        return

async def next_round_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat:
        return
    chat_id = update.effective_chat.id
    if not game_state.get(chat_id, {}).get('awaiting_next'):
        return
    game_state[chat_id]['awaiting_next'] = False
    await start_round(context, chat_id)

# --- –ö–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥" –∏ "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã" ---
async def show_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    mode = game_state.get(chat_id, {}).get('mode', 'team')
    if mode == 'individual':
        participants = {uid: name for uid, name in get_participants(chat_id)}
        if 'individual_total_score' not in game_state[chat_id]:
            await query.answer('–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            return
        text = '‚≠ê –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n'
        sorted_final = sorted(participants.items(), key=lambda x: (game_state[chat_id]['individual_total_score'][x[0]] + game_state[chat_id]['individual_total_bonus'][x[0]]), reverse=True)
        for pos, (uid, name) in enumerate(sorted_final):
            total = game_state[chat_id]['individual_total_score'][uid]
            bonus = game_state[chat_id]['individual_total_bonus'][uid]
            medal = lang.get_emoji('emoji_leader', chat_id) if pos < 3 else '‚≠ê'
            text += f'{medal} {name}: {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total+bonus})\n'
        await query.answer()
        await context.bot.send_message(chat_id, text)
    else:
        total_score = get_total_score(chat_id)
        total_fast_bonus = get_total_fast_bonus(chat_id)
        total_points = total_score + total_fast_bonus
        text = f'‚≠ê –ö–æ–º–∞–Ω–¥–Ω—ã–π —Å—á—ë—Ç: {total_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {total_fast_bonus} –±–æ–Ω—É—Å–æ–≤ (–∏—Ç–æ–≥–æ: {total_points})'
        await query.answer()
        await context.bot.send_message(chat_id, text)
async def leave_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if admin and user_id == admin[0]:
        await query.answer('–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É!')
        return
    participants = get_participants(chat_id)
    before = len(participants)
    participants_copy = set(participants)
    for uid, name in participants_copy:
        if uid == user_id:
            participants.remove((uid, name))
    after = len(participants)
    await query.answer('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.' if after < before else '–í—ã –Ω–µ –±—ã–ª–∏ –≤ –∏–≥—Ä–µ.')
    await send_registration_message(context, chat_id)

# --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ ---
async def rounds_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤!', show_alert=True)
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('rounds_'):
        return
    rounds = int(data.split('_')[1])
    set_rounds(chat_id, rounds)
    mode = game_state[chat_id].get('mode')
    difficulty = get_difficulty(chat_id)
    await query.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {rounds}')
    await send_settings_message(context, chat_id, 'questions', extra={'mode': mode, 'difficulty': difficulty, 'rounds': rounds})
    game_state[chat_id]['awaiting_questions_per_round'] = True

# --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
async def questions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', show_alert=True)
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('questions_'):
        return
    questions = int(data.split('_')[1])
    set_questions_per_round(chat_id, questions)
    mode = game_state[chat_id].get('mode')
    difficulty = get_difficulty(chat_id)
    rounds = get_rounds(chat_id)
    await query.answer(f'–í –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ –±—É–¥–µ—Ç {questions} –≤–æ–ø—Ä–æ—Å–æ–≤')
    await send_settings_message(context, chat_id, 'time', extra={'mode': mode, 'difficulty': difficulty, 'rounds': rounds, 'questions': questions})
    game_state[chat_id]['awaiting_time_per_question'] = True

# --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å ---
async def time_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    chat = getattr(query, 'message', None)
    chat_obj = getattr(chat, 'chat', None)
    chat_id = chat_obj.id if chat_obj else None
    if chat_id is None:
        return
    user_id = getattr(getattr(query, 'from_user', None), 'id', None)
    admin = get_session_admin(chat_id)
    if not admin or user_id != admin[0]:
        await query.answer('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å!', show_alert=True)
        return
    data = getattr(query, 'data', None)
    if not data or not data.startswith('time_'):
        return
    seconds = int(data.split('_')[1])
    set_time_per_question(chat_id, seconds)
    mode = game_state[chat_id].get('mode')
    difficulty = get_difficulty(chat_id)
    rounds = get_rounds(chat_id)
    questions = get_questions_per_round(chat_id)
    await query.answer(f'–í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {seconds//60} –º–∏–Ω.')
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    msg_id = game_state[chat_id].get('settings_message_id')
    if msg_id:
        try:
            await context.bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        game_state[chat_id]['settings_message_id'] = None
    await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–≤–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏"):' )
    game_state[chat_id]['awaiting_theme'] = True

# --- –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É ---
stop_votes = defaultdict(set)  # chat_id -> set(user_id)

async def exit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    admin = get_session_admin(chat_id)
    if admin and user_id == admin[0]:
        await update.message.reply_text('–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.')
        return
    participants = get_participants(chat_id)
    before = len(participants)
    participants_copy = set(participants)
    for uid, name in participants_copy:
        if uid == user_id:
            participants.remove((uid, name))
    after = len(participants)
    if after < before:
        await update.message.reply_text('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.')
        await send_registration_message(context, chat_id)
    else:
        await update.message.reply_text('–í—ã –Ω–µ –±—ã–ª–∏ –≤ –∏–≥—Ä–µ.')

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    admin = get_session_admin(chat_id)
    participants = {uid for uid, _ in get_participants(chat_id)}
    if admin and user_id == admin[0]:
        await update.message.reply_text('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.')
        reset_game(chat_id)
        return
    # –ù–µ –∞–¥–º–∏–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    stop_votes[chat_id].add(user_id)
    votes = len(stop_votes[chat_id])
    total = len(participants)
    if votes > total // 2:
        await update.message.reply_text('–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏. –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
        reset_game(chat_id)
        stop_votes[chat_id].clear()
    else:
        await update.message.reply_text(f'–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–≥—Ä—ã: {votes}/{total} –≥–æ–ª–æ—Å–æ–≤. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã.')

# --- Main ---
VERSION = '1.6.0'
CHANGELOG = '''
–í–µ—Ä—Å–∏—è 1.6.0 (–∏—é–ª—å 2025):
- –í—Å—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (aiosqlite).
- –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é.
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏.
- –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã sqlite3, –∫–æ–¥ —Å—Ç–∞–ª —á–∏—â–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
- –ú–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è UX –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.

–í–µ—Ä—Å–∏—è 1.5.2 (–∏—é–ª—å 2025):
- –î–æ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞/–æ—Ç–º–µ–Ω—ã (—á–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è —á–∏—Å—Ç—ã–º).
- –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö.

–í–µ—Ä—Å–∏—è 1.5.1 (–∏—é–Ω—å 2025):
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚â§ 1 –º–∏–Ω, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ 1 –º–∏–Ω—É—Ç–µ –∏ 10 —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stat ‚Äî –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º –∏ –∏–≥—Ä–æ–∫–∞–º.
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /news ‚Äî –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–í–µ—Ä—Å–∏—è 1.5.0 (–∏—é–Ω—å 2025):
- –ü–æ—è–≤–∏–ª–∏—Å—å –∫–æ–º–∞–Ω–¥—ã /exit (–≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã) –∏ /stop (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É).
- –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä, –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
- –ì–∏–±–∫–∏–π –±–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: 20% –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
- –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç (1, 2, 3, 5 –º–∏–Ω).
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ —Ç–∞–π–º–µ—Ä—É.
- –£–ª—É—á—à–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
- –£–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
- –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã.
- –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.

–í–µ—Ä—Å–∏—è 1.4.x:
- –£–ª—É—á—à–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
- –£–ª—É—á—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥–∞.

–í–µ—Ä—Å–∏—è 1.3.x:
- –¢–∞–π–º–µ—Ä—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –±–æ–Ω—É—Å—ã –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å.
- –£–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.

–í–µ—Ä—Å–∏—è 1.2.x:
- –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º—ã.
- –ö—Ä–∞—Å–∏–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —ç–º–æ–¥–∑–∏, –∫–Ω–æ–ø–∫–∏.

–í–µ—Ä—Å–∏—è 1.1.x:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OpenAI GPT-4o.
- –£–ª—É—á—à–µ–Ω–∏—è prompt –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.

–í–µ—Ä—Å–∏—è 1.0.x:
- –ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –∫–≤–∏–∑-–±–æ—Ç–∞.
'''

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        return
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'ü§ñ –ö–≤–∏–∑-–±–æ—Ç\n–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {VERSION}\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n{CHANGELOG}'
    )

# --- SQLite: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ —Ç–∞–±–ª–∏—Ü ---
# --- –í–æ–∑–≤—Ä–∞—â–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –∫ db.py, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º db.xxx –±–µ–∑ await ---

def get_questions_history(theme: str, limit: int = 50) -> list:
    return db.get_questions_history(theme, limit)

def add_question_to_history(theme: str, question: str):
    db.add_question_to_history(theme, question)

def get_last_game_id(chat_id):
    return db.get_last_game_id(chat_id)

def insert_answers(game_id, answers):
    db.insert_answers(game_id, answers)

def insert_game_participants(game_id, participants):
    db.insert_game_participants(game_id, participants)

async def lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [["–†—É—Å—Å–∫–∏–π", "English"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=reply_markup)

async def lang_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
    chat_id = update.effective_chat.id if update.effective_chat else None
    if chat_id is None:
        return
    text = update.message.text.lower() if update.message.text else ''
    if "—Ä—É—Å" in text:
        lang.set_language(chat_id, "ru")
        await update.message.reply_text("–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫")
    elif "eng" in text:
        lang.set_language(chat_id, "en")
        await update.message.reply_text("Language switched to English üá¨üáß")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫ / Unknown language")

async def stat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id if update.effective_chat else None
    if chat_id is None:
        return
    async with aiosqlite.connect('quizbot.db') as conn:
        async with conn.execute('SELECT COUNT(*) FROM games') as c:
            total_games = (await c.fetchone())[0]
        async with conn.execute('SELECT username, wins FROM users ORDER BY wins DESC, total_score DESC LIMIT 5') as c:
            top_wins = await c.fetchall()
        async with conn.execute('SELECT username, total_score FROM users ORDER BY total_score DESC, wins DESC LIMIT 5') as c:
            top_scores = await c.fetchall()
        async with conn.execute('SELECT theme, COUNT(*) as cnt FROM games GROUP BY theme ORDER BY cnt DESC LIMIT 5') as c:
            top_themes = await c.fetchall()
    lang_code = lang.get_language(chat_id)
    text = f'üìä <b>{lang.get_text("stat", lang=lang_code)}</b>\n\n'
    text += f'{lang.get_text("total_games", lang=lang_code)} <b>{total_games}</b>\n\n'
    text += 'üèÜ <b>' + lang.get_text("top_players", lang=lang_code) + '</b>\n'
    for i, (username, wins) in enumerate(top_wins, 1):
        text += f'{i}. {username or "(–±–µ–∑ –∏–º–µ–Ω–∏)"} ‚Äî {wins} –ø–æ–±–µ–¥\n'
    text += '\nüíØ <b>' + lang.get_text("top_scores", lang=lang_code) + '</b>\n'
    for i, (username, score) in enumerate(top_scores, 1):
        text += f'{i}. {username or "(–±–µ–∑ –∏–º–µ–Ω–∏)"} ‚Äî {score} –æ—á–∫–æ–≤\n'
    text += '\nüìö <b>' + lang.get_text("top_themes", lang=lang_code) + '</b>\n'
    for i, (theme, cnt) in enumerate(top_themes, 1):
        text += f'{i}. {theme} ‚Äî {cnt} –∏–≥—Ä\n'
    await context.bot.send_message(chat_id, text, parse_mode='HTML')

def main_wrapper():
    print('DB INIT...')
    db.init_db()
    print('DB INIT DONE')
    print('–°–æ–∑–¥–∞—é Application...')
    app = ApplicationBuilder().token(TOKEN).build()
    print('Application —Å–æ–∑–¥–∞–Ω')
    return app

async def main():
    app = main_wrapper()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('next', next_round_handler))
    # --- –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
    app.add_handler(CommandHandler('exit', exit_command))
    app.add_handler(CommandHandler('stop', stop_command))
    app.add_handler(CommandHandler('news', news_command))
    app.add_handler(CommandHandler('stat', stat_command))
    # --- –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ---
    app.add_handler(CallbackQueryHandler(mode_callback, pattern='^mode_'))
    # --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ---
    app.add_handler(CallbackQueryHandler(difficulty_callback, pattern='^difficulty_'))
    # --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ ---
    app.add_handler(CallbackQueryHandler(rounds_callback, pattern='^rounds_'))
    # --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
    app.add_handler(CallbackQueryHandler(questions_callback, pattern='^questions_'))
    # --- –ù–æ–≤—ã–π callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å ---
    app.add_handler(CallbackQueryHandler(time_callback, pattern='^time_'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–¥–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & THEME_STAGE_FILTER, theme_handler))
    app.add_handler(CallbackQueryHandler(join_callback, pattern='^join$'))
    app.add_handler(CallbackQueryHandler(end_registration_callback, pattern='^end_registration$'))
    app.add_handler(CallbackQueryHandler(captain_callback, pattern='^captain_'))
    app.add_handler(CallbackQueryHandler(answer_callback, pattern='^answer$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ANSWER_STAGE_FILTER, answer_message_handler))
    # --- –ö–Ω–æ–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –≤—ã—Ö–æ–¥–∞ ---
    app.add_handler(CallbackQueryHandler(show_rating_callback, pattern='^show_rating$'))
    app.add_handler(CallbackQueryHandler(leave_callback, pattern='^leave$'))
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CallbackQueryHandler –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª—é–±—ã—Ö callback_query
    async def log_any_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"[LOG] CallbackQuery: {update.callback_query.to_dict() if update.callback_query else update}")
        return False
    app.add_handler(CallbackQueryHandler(log_any_callback), group=100)
    # –õ–æ–≥–≥–µ—Ä—ã ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ!
    async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"[LOG] Incoming update: type={type(update)} content={update.to_dict()}")
        return False
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, log_all_updates), group=100)
    app.add_handler(CallbackQueryHandler(log_all_updates), group=100)
    app.add_handler(CommandHandler('lang', lang_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lang_choice_handler))
    print('Handlers –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞—é polling...')
    try:
        await app.run_polling()
    except RuntimeError as e:
        print('Polling error:', e)
        if "already running" in str(e) or "Cannot close a running event loop" in str(e):
            print("[ERROR] PTB –Ω–µ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å event loop. –ó–∞–ø—É—Å–∫ –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π Python –∏–ª–∏ Jupyter/replit —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PTB 20+.")
            import sys
            sys.exit(1)
        else:
            raise
    print('Polling –∑–∞–≤–µ—Ä—à—ë–Ω')

print('=== BOT STARTED ===')
import sys
print('Python version:', sys.version)
try:
    with open('requirements.txt') as f:
        print('requirements.txt:', f.read())
except Exception as e:
    print('requirements.txt not found:', e)

print('–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é PTB...')
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
print('PTB –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')

print('–ó–∞–ø—É—Å–∫ main...')
import sys
import asyncio
try:
    asyncio.get_running_loop()
except RuntimeError:
    asyncio.run(main())
else:
    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except RuntimeError as e:
        print('Loop error:', e)
        if "already running" in str(e) or "Cannot close a running event loop" in str(e):
            print("[ERROR] PTB –Ω–µ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å event loop. –ó–∞–ø—É—Å–∫ –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π Python –∏–ª–∏ Jupyter/replit —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PTB 20+.")
            import sys
            sys.exit(1)
        else:
            raise
print('main –∑–∞–≤–µ—Ä—à—ë–Ω')

if __name__ == "__main__":
    import asyncio
    REPL_URL = f"https://{os.environ['REPL_SLUG']}.{os.environ['REPL_OWNER']}.repl.co"
    WEBHOOK_PATH = f"/{TOKEN}"
    WEBHOOK_URL = REPL_URL + WEBHOOK_PATH
    print(f"Webhook URL: {WEBHOOK_URL}")
    app = ApplicationBuilder().token(TOKEN).build()
    # ... add_handler ...
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('next', next_round_handler))
    app.add_handler(CommandHandler('exit', exit_command))
    app.add_handler(CommandHandler('stop', stop_command))
    app.add_handler(CommandHandler('news', news_command))
    app.add_handler(CommandHandler('stat', stat_command))
    app.add_handler(CallbackQueryHandler(mode_callback, pattern='^mode_'))
    app.add_handler(CallbackQueryHandler(difficulty_callback, pattern='^difficulty_'))
    app.add_handler(CallbackQueryHandler(rounds_callback, pattern='^rounds_'))
    app.add_handler(CallbackQueryHandler(questions_callback, pattern='^questions_'))
    app.add_handler(CallbackQueryHandler(time_callback, pattern='^time_'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & THEME_STAGE_FILTER, theme_handler))
    app.add_handler(CallbackQueryHandler(join_callback, pattern='^join$'))
    app.add_handler(CallbackQueryHandler(end_registration_callback, pattern='^end_registration$'))
    app.add_handler(CallbackQueryHandler(captain_callback, pattern='^captain_'))
    app.add_handler(CallbackQueryHandler(answer_callback, pattern='^answer$'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ANSWER_STAGE_FILTER, answer_message_handler))
    app.add_handler(CallbackQueryHandler(show_rating_callback, pattern='^show_rating$'))
    app.add_handler(CallbackQueryHandler(leave_callback, pattern='^leave$'))
    async def log_any_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"[LOG] CallbackQuery: {update.callback_query.to_dict() if update.callback_query else update}")
        return False
    app.add_handler(CallbackQueryHandler(log_any_callback), group=100)
    async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"[LOG] Incoming update: type={type(update)} content={update.to_dict()}")
        return False
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, log_all_updates), group=100)
    app.add_handler(CallbackQueryHandler(log_all_updates), group=100)
    app.add_handler(CommandHandler('lang', lang_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lang_choice_handler))
    import db
    db.init_db()
    async def main():
        await app.bot.set_webhook(WEBHOOK_URL)
        print("Webhook set:", WEBHOOK_URL)
        await app.run_webhook(
            listen="0.0.0.0",
            port=443,  # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ 80
            url_path=WEBHOOK_PATH,
            webhook_url=WEBHOOK_URL,
        )
    asyncio.run(main())